// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using API.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace API.Data
{
    public partial class DataContext : DbContext
    {
        public DataContext()
        {
        }

        public DataContext(DbContextOptions<DataContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<Photo> Photo { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserLike> UserLike { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=localhost;Initial Catalog=DatingDB;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Message>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Content)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.DateReadOn).HasColumnType("date");

                entity.Property(e => e.MessageSentOn).HasColumnType("date");

                entity.Property(e => e.RecipientUsername)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SenderUsername)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Photo>(entity =>
            {
                entity.Property(e => e.PublicId).IsUnicode(false);

                entity.Property(e => e.Url)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.PlatformUser)
                    .WithMany(p => p.Photo)
                    .HasForeignKey(d => d.PlatformUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Photos_Users_UserID");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.City)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

                entity.Property(e => e.Gender)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Interests)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Introduction).IsUnicode(false);

                entity.Property(e => e.KnownAs)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastActive)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.LookingFor)
                    .HasMaxLength(750)
                    .IsUnicode(false);

                entity.Property(e => e.PasswordHash).IsRequired();

                entity.Property(e => e.PasswordSalt).IsRequired();

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasMany(d => d.LikedUser)
                    .WithMany(p => p.SourceUser)
                    .UsingEntity<Dictionary<string, object>>(
                        "UserLike",
                        l => l.HasOne<User>().WithMany().HasForeignKey("LikedUserId").HasConstraintName("FK__UserLike__LikedU__4CA06362"),
                        r => r.HasOne<User>().WithMany().HasForeignKey("SourceUserId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__UserLike__Source__4E88ABD4"),
                        j =>
                        {
                            j.HasKey("SourceUserId", "LikedUserId").HasName("PK__UserLike__E72C37DD27A56C88");

                            j.ToTable("UserLike");
                        });

                entity.HasMany(d => d.SourceUser)
                    .WithMany(p => p.LikedUser)
                    .UsingEntity<Dictionary<string, object>>(
                        "UserLike",
                        l => l.HasOne<User>().WithMany().HasForeignKey("SourceUserId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__UserLike__Source__4E88ABD4"),
                        r => r.HasOne<User>().WithMany().HasForeignKey("LikedUserId").HasConstraintName("FK__UserLike__LikedU__4CA06362"),
                        j =>
                        {
                            j.HasKey("SourceUserId", "LikedUserId").HasName("PK__UserLike__E72C37DD27A56C88");

                            j.ToTable("UserLike");
                        });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}